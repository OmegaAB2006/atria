import React, { useState, useEffect } from 'react';

const API_BASE_URL = 'http://localhost:5000';
let currentUserId = 'user123';

// Main App Component
export default function App() {
  const [currentPage, setCurrentPage] = useState('home');
  const [skills, setSkills] = useState({});
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadUserData();
  }, []);

  const navigate = (page) => {
    setCurrentPage(page);
  };

  const loadUserData = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/get-progress/${currentUserId}`);
      const data = await response.json();
      if (data.success) {
        setSkills(data.progress);
      }
      setLoading(false);
    } catch (error) {
      console.error('Error loading user data:', error);
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-white">
      {currentPage === 'home' && <HomePage navigate={navigate} />}
      {currentPage === 'about' && <AboutPage navigate={navigate} />}
      {currentPage === 'skill-galaxy' && <SkillGalaxyPage navigate={navigate} skills={skills} setSkills={setSkills} loadUserData={loadUserData} />}
      {currentPage === 'team-matrix' && <TeamMatrixPage navigate={navigate} />}
      {currentPage === 'quiz' && <QuizPage navigate={navigate} skills={skills} loadUserData={loadUserData} />}
      {currentPage === 'recommendations' && <RecommendationsPage navigate={navigate} skills={skills} />}
    </div>
  );
}

// Navigation Component
function Navigation({ navigate, currentPage }) {
  return (
    <header className="px-8 py-6 flex justify-between items-center border-b border-gray-200">
      <div className="text-sm font-semibold tracking-wider text-gray-800 cursor-pointer" onClick={() => navigate('home')}>
        PERFECT TEAM
      </div>
      <nav className="flex gap-8 items-center">
        <button
          onClick={() => navigate('home')}
          className={`text-sm transition ${currentPage === 'home' ? 'text-green-600 font-medium border-b-2 border-green-600 pb-1' : 'text-gray-600 hover:text-gray-900'}`}
        >
          HOME
        </button>
        <button
          onClick={() => navigate('about')}
          className={`text-sm transition ${currentPage === 'about' ? 'text-green-600 font-medium border-b-2 border-green-600 pb-1' : 'text-gray-600 hover:text-gray-900'}`}
        >
          ABOUT US
        </button>
        <button
          onClick={() => navigate('skill-galaxy')}
          className="text-sm text-gray-600 hover:text-gray-900 transition"
        >
          SKILL GALAXY
        </button>
        <button
          onClick={() => navigate('team-matrix')}
          className="text-sm text-gray-600 hover:text-gray-900 transition"
        >
          TEAM MATRIX
        </button>
        <button
          onClick={() => navigate('quiz')}
          className="text-sm text-gray-600 hover:text-gray-900 transition"
        >
          TAKE QUIZ
        </button>
        <button
          onClick={() => navigate('recommendations')}
          className="text-sm text-gray-600 hover:text-gray-900 transition"
        >
          RECOMMENDATIONS
        </button>
      </nav>
      <button className="text-sm bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition">
        LOG IN
      </button>
    </header>
  );
}

// Home Page
function HomePage({ navigate }) {
  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="home" />

      <main className="flex-1 flex flex-col items-center justify-center px-8 py-16 relative">
        <svg className="absolute left-0 top-1/2 -translate-y-1/2 w-32 h-64" viewBox="0 0 100 200">
          <path d="M 10 0 Q 50 50, 10 100 T 10 200" stroke="#10b981" strokeWidth="3" fill="none" />
        </svg>
        <svg className="absolute right-0 top-1/2 -translate-y-1/2 w-32 h-64" viewBox="0 0 100 200">
          <path d="M 90 0 Q 50 50, 90 100 T 90 200" stroke="#10b981" strokeWidth="3" fill="none" />
        </svg>

        <div className="mb-4">
          <svg width="40" height="40" viewBox="0 0 40 40" fill="none">
            <rect x="8" y="8" width="8" height="24" fill="#10b981" />
            <rect x="24" y="8" width="8" height="24" fill="#10b981" />
          </svg>
        </div>

        <h1 className="text-6xl md:text-7xl font-black text-center mb-6 tracking-tight">
          CREATE<br />
          THE <span className="relative inline-block">
            <span className="relative z-10">BEST</span>
            <span className="absolute inset-0 bg-green-500 opacity-20 rounded-lg"></span>
          </span> TEAM
        </h1>

        <p className="text-gray-600 text-center max-w-md mb-8 leading-relaxed">
          Explore innovative tools for team building, skill tracking, and adaptive quizzes.
        </p>

        <div className="flex gap-4 mb-16">
          <button
            onClick={() => navigate('skill-galaxy')}
            className="bg-gray-900 text-white px-8 py-3 rounded-md font-medium hover:bg-gray-800 transition"
          >
            EXPLORE TOOLS
          </button>
          <button
            onClick={() => navigate('about')}
            className="bg-white border-2 border-gray-900 text-gray-900 px-8 py-3 rounded-md font-medium hover:bg-gray-100 transition"
          >
            LEARN MORE
          </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-5xl w-full">
          <div
            onClick={() => navigate('skill-galaxy')}
            className="p-6 border-2 border-gray-200 rounded-lg hover:border-green-500 transition cursor-pointer"
          >
            <div className="text-3xl mb-3">üåå</div>
            <h3 className="text-xl font-bold mb-2">Skill Galaxy</h3>
            <p className="text-gray-600 text-sm">Visualize your skills as a cosmic universe that grows with you.</p>
          </div>

          <div
            onClick={() => navigate('team-matrix')}
            className="p-6 border-2 border-gray-200 rounded-lg hover:border-green-500 transition cursor-pointer"
          >
            <div className="text-3xl mb-3">üìä</div>
            <h3 className="text-xl font-bold mb-2">Team Matrix</h3>
            <p className="text-gray-600 text-sm">Map your team's collective skills and identify gaps.</p>
          </div>

          <div
            onClick={() => navigate('quiz')}
            className="p-6 border-2 border-gray-200 rounded-lg hover:border-green-500 transition cursor-pointer"
          >
            <div className="text-3xl mb-3">üìù</div>
            <h3 className="text-xl font-bold mb-2">Skill Quiz</h3>
            <p className="text-gray-600 text-sm">Test your knowledge with AI-generated quizzes and coding challenges.</p>
          </div>
        </div>
      </main>
    </div>
  );
}

// About Page
function AboutPage({ navigate }) {
  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="about" />

      <main className="flex-1 px-8 py-16 max-w-4xl mx-auto">
        <h1 className="text-5xl font-black mb-6">About Perfect Team</h1>
        <p className="text-gray-700 text-lg mb-6 leading-relaxed">
          Perfect Team is an innovative platform designed to revolutionize how individuals and teams track growth,
          develop skills, and assess competencies.
        </p>

        <div className="space-y-8 mt-12">
          <div>
            <h2 className="text-2xl font-bold mb-3">üß¨ WorkDNA Technology</h2>
            <p className="text-gray-600 leading-relaxed">
              Our WorkDNA system creates a dynamic skill blueprint that evolves with your experience.
              Track technical and soft skills, visualize growth, and plan your career journey.
            </p>
          </div>

          <div>
            <h2 className="text-2xl font-bold mb-3">ü§ñ AI-Powered Assessment</h2>
            <p className="text-gray-600 leading-relaxed">
              We leverage Google Gemini AI to generate personalized quizzes and coding challenges that adapt
              to your skill level and provide meaningful learning experiences.
            </p>
          </div>

          <div>
            <h2 className="text-2xl font-bold mb-3">üìà Growth-Focused</h2>
            <p className="text-gray-600 leading-relaxed">
              Every tool we build is designed to help you and your team grow. From skill visualization
              to personalized recommendations, we empower continuous improvement.
            </p>
          </div>
        </div>

        <button
          onClick={() => navigate('home')}
          className="mt-12 bg-green-600 text-white px-8 py-3 rounded-md font-medium hover:bg-green-700 transition"
        >
          BACK TO HOME
        </button>
      </main>
    </div>
  );
}

// Skill Galaxy Page
function SkillGalaxyPage({ navigate, skills, setSkills, loadUserData }) {
  const [newSkillName, setNewSkillName] = useState('');
  const [showAddModal, setShowAddModal] = useState(false);
  const [githubInput, setGithubInput] = useState('');
  const [githubStatus, setGithubStatus] = useState('');

  const addSkill = async () => {
    if (!newSkillName.trim()) return;

    try {
      const response = await fetch(`${API_BASE_URL}/api/add-skill`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: currentUserId,
          skill: newSkillName
        })
      });

      const data = await response.json();
      if (data.success) {
        await loadUserData();
        setNewSkillName('');
        setShowAddModal(false);
      }
    } catch (error) {
      console.error('Error adding skill:', error);
    }
  };

  const analyzeGitHub = async () => {
    if (!githubInput.trim()) {
      setGithubStatus('Please enter a GitHub username or repository URL');
      return;
    }

    setGithubStatus('Analyzing GitHub profile...');

    try {
      const isUrl = githubInput.includes('github.com');
      const response = await fetch(`${API_BASE_URL}/api/analyze-github`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          github_url: isUrl ? githubInput : null,
          username: !isUrl ? githubInput : null
        })
      });

      const data = await response.json();
      if (data.success) {
        const skillCount = Object.keys(data.skills).length;
        setGithubStatus(`Successfully imported ${skillCount} skills from GitHub!`);
        await loadUserData();
        setGithubInput('');
      } else {
        setGithubStatus(`Error: ${data.error}`);
      }
    } catch (error) {
      console.error('Error analyzing GitHub:', error);
      setGithubStatus('Error analyzing GitHub. Please check the input and try again.');
    }
  };

  const skillsArray = Object.entries(skills).map(([name, level], idx) => ({
    name,
    level,
    category: 'Technical',
    x: 20 + (idx % 3) * 30,
    y: 20 + Math.floor(idx / 3) * 30
  }));

  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="skill-galaxy" />

      <main className="flex-1 px-8 py-16">
        <div className="max-w-6xl mx-auto">
          <h1 className="text-4xl font-black mb-4">üåå Skill Galaxy</h1>
          <p className="text-gray-600 mb-8">Your skills as a cosmic visualization</p>

          {/* GitHub Import Section */}
          <div className="bg-gray-50 rounded-lg p-6 mb-8 border border-gray-200">
            <h2 className="text-xl font-bold mb-4">Import Skills from GitHub</h2>
            <div className="flex gap-4">
              <input
                type="text"
                value={githubInput}
                onChange={(e) => setGithubInput(e.target.value)}
                placeholder="Enter GitHub username or repository URL"
                className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:border-green-500"
              />
              <button
                onClick={analyzeGitHub}
                className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition"
              >
                Analyze
              </button>
            </div>
            {githubStatus && (
              <div className="mt-4 text-sm text-gray-600">{githubStatus}</div>
            )}
          </div>

          {/* Constellation Visualization */}
          <div className="bg-gray-900 rounded-lg p-8 mb-8 relative" style={{ height: '400px' }}>
            {skillsArray.map((skill, idx) => (
              <div
                key={idx}
                className="absolute rounded-full bg-green-500 flex items-center justify-center text-white font-bold shadow-lg cursor-pointer hover:scale-110 transition"
                style={{
                  width: `${Math.min(skill.level, 100)}px`,
                  height: `${Math.min(skill.level, 100)}px`,
                  left: `${skill.x}%`,
                  top: `${skill.y}%`,
                  fontSize: '10px'
                }}
                title={`${skill.name}: ${skill.level}%`}
              >
                <span className="text-xs">{skill.name}</span>
              </div>
            ))}
            {skillsArray.length === 0 && (
              <div className="flex items-center justify-center h-full text-white text-center">
                <div>
                  <p className="text-xl mb-2">No skills yet!</p>
                  <p className="text-sm text-gray-400">Add skills or import from GitHub to get started</p>
                </div>
              </div>
            )}
          </div>

          {/* Skills List */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
            {skillsArray.map((skill, idx) => (
              <div key={idx} className="p-4 border border-gray-200 rounded-lg bg-white">
                <h3 className="font-bold mb-2">{skill.name}</h3>
                <div className="text-sm text-gray-600 mb-2">{skill.category}</div>
                <div className="bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-green-500 h-2 rounded-full"
                    style={{ width: `${skill.level}%` }}
                  ></div>
                </div>
                <div className="text-right text-sm text-gray-600 mt-1">{skill.level}%</div>
              </div>
            ))}
          </div>

          <button
            onClick={() => setShowAddModal(true)}
            className="bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700 transition"
          >
            + Add New Skill
          </button>
        </div>
      </main>

      {/* Add Skill Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-8 rounded-lg max-w-md w-full mx-4">
            <h3 className="text-2xl font-bold mb-4">Add New Skill</h3>
            <input
              type="text"
              value={newSkillName}
              onChange={(e) => setNewSkillName(e.target.value)}
              placeholder="Enter skill name"
              className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:border-green-500 mb-4"
              onKeyPress={(e) => e.key === 'Enter' && addSkill()}
            />
            <div className="flex gap-4">
              <button
                onClick={addSkill}
                className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition flex-1"
              >
                Add
              </button>
              <button
                onClick={() => {
                  setShowAddModal(false);
                  setNewSkillName('');
                }}
                className="bg-gray-200 text-gray-800 px-6 py-2 rounded-lg hover:bg-gray-300 transition flex-1"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// Team Matrix Page
function TeamMatrixPage({ navigate }) {
  const teamMembers = [
    { name: 'Alice', skills: { React: 90, Node: 70, Design: 60 } },
    { name: 'Bob', skills: { React: 60, Node: 85, Design: 40 } },
    { name: 'Charlie', skills: { React: 75, Node: 65, Design: 80 } },
  ];

  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="team-matrix" />

      <main className="flex-1 px-8 py-16">
        <div className="max-w-6xl mx-auto">
          <h1 className="text-4xl font-black mb-4">üìä Team Skill Matrix</h1>
          <p className="text-gray-600 mb-8">Visualize your team's collective capabilities</p>

          <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
            <table className="w-full">
              <thead className="bg-gray-100">
                <tr>
                  <th className="px-6 py-3 text-left">Team Member</th>
                  <th className="px-6 py-3 text-left">React</th>
                  <th className="px-6 py-3 text-left">Node.js</th>
                  <th className="px-6 py-3 text-left">Design</th>
                </tr>
              </thead>
              <tbody>
                {teamMembers.map((member, idx) => (
                  <tr key={idx} className="border-t border-gray-200">
                    <td className="px-6 py-4 font-medium">{member.name}</td>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-2">
                        <div className="bg-gray-200 rounded-full h-2 w-24">
                          <div
                            className="bg-green-500 h-2 rounded-full"
                            style={{ width: `${member.skills.React}%` }}
                          ></div>
                        </div>
                        <span className="text-sm">{member.skills.React}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-2">
                        <div className="bg-gray-200 rounded-full h-2 w-24">
                          <div
                            className="bg-green-500 h-2 rounded-full"
                            style={{ width: `${member.skills.Node}%` }}
                          ></div>
                        </div>
                        <span className="text-sm">{member.skills.Node}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-2">
                        <div className="bg-gray-200 rounded-full h-2 w-24">
                          <div
                            className="bg-green-500 h-2 rounded-full"
                            style={{ width: `${member.skills.Design}%` }}
                          ></div>
                        </div>
                        <span className="text-sm">{member.skills.Design}</span>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <button className="mt-8 bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700 transition">
            + Add Team Member
          </button>
        </div>
      </main>
    </div>
  );
}

// Quiz Page
function QuizPage({ navigate, skills, loadUserData }) {
  const [selectedSkill, setSelectedSkill] = useState('');
  const [difficulty, setDifficulty] = useState('medium');
  const [currentQuiz, setCurrentQuiz] = useState(null);
  const [userAnswers, setUserAnswers] = useState([]);
  const [showResults, setShowResults] = useState(false);
  const [score, setScore] = useState(0);
  const [loading, setLoading] = useState(false);

  const generateQuiz = async () => {
    if (!selectedSkill) {
      alert('Please select a skill');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`${API_BASE_URL}/api/generate-quiz`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          skill: selectedSkill,
          difficulty: difficulty,
          question_count: 5
        })
      });

      const data = await response.json();
      if (data.success) {
        setCurrentQuiz(data.quiz);
        setUserAnswers(new Array(data.quiz.questions.length).fill(''));
      } else {
        alert('Error generating quiz: ' + data.error);
      }
    } catch (error) {
      console.error('Error generating quiz:', error);
      alert('Error generating quiz. Please try again.');
    }
    setLoading(false);
  };

  const submitQuiz = async () => {
    if (!currentQuiz) return;

    const allAnswered = userAnswers.every(a => a !== '' && a !== null);
    if (!allAnswered) {
      if (!window.confirm("You haven't answered all questions. Submit anyway?")) {
        return;
      }
    }

    try {
      let correctCount = 0;
      const correctAnswers = [];

      for (let i = 0; i < currentQuiz.questions.length; i++) {
        const question = currentQuiz.questions[i];
        if (question.type === 'mcq') {
          const isCorrect = userAnswers[i] === question.correct_answer;
          if (isCorrect) correctCount++;
          correctAnswers.push(question.correct_answer);
        } else {
          correctAnswers.push(null);
          if (userAnswers[i] && userAnswers[i].trim().length > 50) {
            correctCount += 0.5;
          }
        }
      }

      const calculatedScore = (correctCount / currentQuiz.questions.length) * 100;
      setScore(Math.round(calculatedScore));

      const response = await fetch(`${API_BASE_URL}/api/submit-quiz`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: currentUserId,
          skill: currentQuiz.skill,
          answers: userAnswers,
          correct_answers: correctAnswers
        })
      });

      await response.json();
      setShowResults(true);
      await loadUserData();
    } catch (error) {
      console.error('Error submitting quiz:', error);
    }
  };

  const resetQuiz = () => {
    setCurrentQuiz(null);
    setUserAnswers([]);
    setShowResults(false);
    setScore(0);
    setSelectedSkill('');
  };

  const recordAnswer = (index, answer) => {
    const newAnswers = [...userAnswers];
    newAnswers[index] = answer;
    setUserAnswers(newAnswers);
  };

  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="quiz" />

      <main className="flex-1 px-8 py-16">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl font-black mb-4">üìù Take a Quiz</h1>
          <p className="text-gray-600 mb-8">Test your knowledge with AI-generated questions</p>

          {!currentQuiz && !showResults && (
            <div className="bg-white border border-gray-200 rounded-lg p-8">
              <div className="mb-4">
                <label className="block text-gray-700 mb-2 font-medium">Select Skill</label>
                <select
                  value={selectedSkill}
                  onChange={(e) => setSelectedSkill(e.target.value)}
                  className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:border-green-500"
                >
                  <option value="">Choose a skill...</option>
                  {Object.keys(skills).map(skill => (
                    <option key={skill} value={skill}>{skill}</option>
                  ))}
                </select>
              </div>

              <div className="mb-6">
                <label className="block text-gray-700 mb-2 font-medium">Difficulty</label>
                <select
                  value={difficulty}
                  onChange={(e) => setDifficulty(e.target.value)}
                  className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:border-green-500"
                >
                  <option value="easy">Easy</option>
                  <option value="medium">Medium</option>
                  <option value="hard">Hard</option>
                </select>
              </div>

              <button
                onClick={generateQuiz}
                disabled={loading}
                className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition w-full font-medium disabled:bg-gray-400"
              >
                {loading ? 'Generating Quiz...' : 'Generate Quiz'}
              </button>
            </div>
          )}

          {currentQuiz && !showResults && (
            <div className="bg-white border border-gray-200 rounded-lg p-8">
              <h2 className="text-2xl font-bold mb-6">{currentQuiz.skill} Quiz - {currentQuiz.difficulty}</h2>

              {currentQuiz.questions.map((question, index) => (
                <div key={index} className="mb-8 p-6 bg-gray-50 rounded-lg border border-gray-200">
                  {question.type === 'mcq' ? (
                    <>
                      <div className="mb-4">
                        <span className="text-green-600 font-semibold">Question {index + 1}</span>
                        <h4 className="text-xl text-gray-800 mt-2">{question.question}</h4>
                      </div>
                      <div className="space-y-3">
                        {Object.entries(question.options).map(([key, value]) => (
                          <label key={key} className="flex items-start p-3 rounded-lg bg-white border border-gray-200 hover:border-green-500 cursor-pointer transition">
                            <input
                              type="radio"
                              name={`question-${index}`}
                              value={key}
                              checked={userAnswers[index] === key}
                              onChange={() => recordAnswer(index, key)}
                              className="mt-1 mr-3"
                            />
                            <span className="text-gray-700">
                              <strong>{key}:</strong> {value}
                            </span>
                          </label>
                        ))}
                      </div>
                    </>
                  ) : (
                    <>
                      <div className="mb-4">
                        <span className="text-green-600 font-semibold">Coding Problem {index + 1}</span>
                        <h4 className="text-xl text-gray-800 mt-2">{question.title}</h4>
                      </div>
                      <div className="mb-4 text-gray-700 whitespace-pre-wrap">
                        {question.description}
                      </div>
                      {question.examples && (
                        <div className="mb-4">
                          <h5 className="text-gray-800 font-semibold mb-2">Examples:</h5>
                          {question.examples.map((ex, idx) => (
                            <div key={idx} className="bg-gray-900 text-gray-100 p-3 rounded mb-2 text-sm font-mono">
                              <div className="text-green-400">Input: {ex.input}</div>
                              <div className="text-blue-400">Output: {ex.output}</div>
                              {ex.explanation && <div className="text-gray-400 mt-1">{ex.explanation}</div>}
                            </div>
                          ))}
                        </div>
                      )}
                      <div className="mb-2">
                        <h5 className="text-gray-800 font-semibold mb-2">Your Solution:</h5>
                      </div>
                      <textarea
                        value={userAnswers[index]}
                        onChange={(e) => recordAnswer(index, e.target.value)}
                        className="w-full h-64 p-4 bg-gray-900 text-gray-100 rounded-lg font-mono text-sm resize-y focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder={question.function_signature || "Write your solution here..."}
                      />
                    </>
                  )}
                </div>
              ))}

              <button
                onClick={submitQuiz}
                className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition w-full font-medium"
              >
                Submit Quiz
              </button>
            </div>
          )}

          {showResults && (
            <div className="bg-white border border-gray-200 rounded-lg p-8 text-center">
              <h3 className="text-4xl font-bold text-gray-800 mb-4">Your Score</h3>
              <div className="text-6xl font-bold text-green-600 mb-6">{score}%</div>
              <p className="text-gray-700 mb-8 text-lg">
                {score >= 90 ? 'Outstanding! You have excellent mastery of this skill!' :
                 score >= 70 ? 'Great job! You have a solid understanding of this skill.' :
                 score >= 50 ? 'Good effort! Keep practicing to improve your skills.' :
                 'Keep learning! Review the materials and try again.'}
              </p>
              <button
                onClick={resetQuiz}
                className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition font-medium"
              >
                Take Another Quiz
              </button>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}

// Recommendations Page
function RecommendationsPage({ navigate, skills }) {
  const [recommendations, setRecommendations] = useState([]);
  const [loading, setLoading] = useState(false);

  const loadRecommendations = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_BASE_URL}/api/get-recommendations`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: currentUserId })
      });

      const data = await response.json();
      if (data.success) {
        setRecommendations(data.recommendations);
      }
    } catch (error) {
      console.error('Error loading recommendations:', error);
    }
    setLoading(false);
  };

  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="recommendations" />

      <main className="flex-1 px-8 py-16">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl font-black mb-4">üí° Personalized Recommendations</h1>
          <p className="text-gray-600 mb-8">Get AI-powered suggestions for skill development</p>

          <button
            onClick={loadRecommendations}
            disabled={loading || Object.keys(skills).length === 0}
            className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition font-medium mb-8 disabled:bg-gray-400"
          >
            {loading ? 'Loading Recommendations...' : 'Get Recommendations'}
          </button>

          {Object.keys(skills).length === 0 && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center">
              <p className="text-yellow-800">Add some skills first to get personalized recommendations!</p>
            </div>
          )}

          <div className="space-y-6">
            {recommendations.map((rec, idx) => (
              <div key={idx} className="bg-white border border-gray-200 rounded-lg p-6">
                <h3 className="text-2xl font-bold text-gray-800 mb-2">{rec.skill}</h3>
                <p className="text-gray-600 mb-4">{rec.reason}</p>

                {rec.topics && rec.topics.length > 0 && (
                  <div className="mb-4">
                    <h4 className="font-semibold text-gray-700 mb-2">Topics to Focus On:</h4>
                    <ul className="list-disc list-inside text-gray-600">
                      {rec.topics.map((topic, i) => (
                        <li key={i}>{topic}</li>
                      ))}
                    </ul>
                  </div>
                )}

                {rec.resources && rec.resources.length > 0 && (
                  <div className="mb-4">
                    <h4 className="font-semibold text-gray-700 mb-2">Recommended Resources:</h4>
                    <ul className="list-disc list-inside text-gray-600">
                      {rec.resources.map((resource, i) => (
                        <li key={i}>{resource}</li>
                      ))}
                    </ul>
                  </div>
                )}

                {rec.estimated_time && (
                  <div className="text-sm text-gray-500">
                    Estimated time: {rec.estimated_time}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </main>
    </div>
  );
}
