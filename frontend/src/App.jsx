import React, { useState, useEffect, useRef } from 'react';

const API_BASE_URL = 'http://localhost:5000';
let currentUserId = 'user123';

// Main App Component
export default function App() {
  const [currentPage, setCurrentPage] = useState('landing');
  const [skills, setSkills] = useState({});
  const [loading, setLoading] = useState(true);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [userName, setUserName] = useState('');

  useEffect(() => {
    if (isLoggedIn) {
      loadUserData();
    }
  }, [isLoggedIn]);

  const navigate = (page) => {
    setCurrentPage(page);
  };

  const handleLogin = (name) => {
    setIsLoggedIn(true);
    setUserName(name);
    setCurrentPage('home');
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    setUserName('');
    setCurrentPage('landing');
  };

  const goToLogin = () => {
    setCurrentPage('login');
  };

  const loadUserData = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/get-progress/${currentUserId}`);
      const data = await response.json();
      if (data.success) {
        setSkills(data.progress);
      }
      setLoading(false);
    } catch (error) {
      console.error('Error loading user data:', error);
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen" style={{background: 'linear-gradient(135deg, #0f0c29 0%, #302b63 50%, #24243e 100%)'}}>
      {currentPage === 'landing' && <LandingPage goToLogin={goToLogin} />}
      {currentPage === 'login' && <LoginPage onLogin={handleLogin} />}
      {currentPage === 'home' && isLoggedIn && <HomePage navigate={navigate} userName={userName} onLogout={handleLogout} />}
      {currentPage === 'about' && isLoggedIn && <AboutPage navigate={navigate} userName={userName} onLogout={handleLogout} />}
      {currentPage === 'skill-galaxy' && isLoggedIn && <SkillGalaxyPage navigate={navigate} userName={userName} onLogout={handleLogout} skills={skills} setSkills={setSkills} loadUserData={loadUserData} />}
      {currentPage === 'team-matrix' && isLoggedIn && <TeamMatrixPage navigate={navigate} userName={userName} onLogout={handleLogout} />}
      {currentPage === 'quiz' && isLoggedIn && <QuizPage navigate={navigate} userName={userName} onLogout={handleLogout} skills={skills} loadUserData={loadUserData} />}
      {currentPage === 'recommendations' && isLoggedIn && <RecommendationsPage navigate={navigate} userName={userName} onLogout={handleLogout} skills={skills} />}
    </div>
  );
}

// Landing Page Component
function LandingPage({ goToLogin }) {
  const [scrollY, setScrollY] = useState(0);

  useEffect(() => {
    const handleScroll = () => setScrollY(window.scrollY);
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const features = [
    {
      icon: "🌌",
      title: "Skill Constellation",
      description: "Visualize your abilities as an interactive cosmic map that evolves with every achievement"
    },
    {
      icon: "🧠",
      title: "AI-Powered Quizzes",
      description: "Test your knowledge with intelligent questions generated by advanced AI technology"
    },
    {
      icon: "📊",
      title: "Progress Tracking",
      description: "Watch your skills grow in real-time with beautiful, motivating progress indicators"
    },
    {
      icon: "🎯",
      title: "Personalized Insights",
      description: "Get custom recommendations on where to focus your learning journey next"
    },
    {
      icon: "👥",
      title: "Team Collaboration",
      description: "Map your team's collective skills and identify strengths and opportunities"
    },
    {
      icon: "🚀",
      title: "GitHub Integration",
      description: "Import your coding skills directly from your GitHub profile automatically"
    }
  ];

  const testimonials = [
    {
      name: "Sarah Chen",
      role: "Software Engineer",
      quote: "WorkDNA transformed how I approach learning. Seeing my skills as a constellation makes growth feel like an adventure!",
      avatar: "👩‍💻"
    },
    {
      name: "Marcus Rodriguez",
      role: "Team Lead",
      quote: "Finally, a tool that makes skill tracking actually enjoyable. My team loves the visual approach!",
      avatar: "👨‍💼"
    },
    {
      name: "Aisha Patel",
      role: "Designer",
      quote: "The AI quizzes keep me motivated to learn. It's like having a personal coach in your pocket!",
      avatar: "👩‍🎨"
    }
  ];

  return (
    <div className="min-h-screen overflow-hidden">
      {/* Hero Section */}
      <div className="relative min-h-screen flex items-center justify-center px-4 overflow-hidden">
        {/* Animated background elements */}
        <div className="absolute inset-0">
          {[...Array(30)].map((_, i) => (
            <div
              key={i}
              className="absolute rounded-full bg-purple-400 opacity-10"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                width: `${Math.random() * 100 + 50}px`,
                height: `${Math.random() * 100 + 50}px`,
                animation: `pulse ${Math.random() * 3 + 2}s infinite ease-in-out`,
                animationDelay: `${Math.random() * 2}s`
              }}
            />
          ))}
        </div>

        {/* Hero content */}
        <div className="relative z-10 text-center max-w-5xl mx-auto" style={{transform: `translateY(${scrollY * 0.5}px)`}}>
          <div className="mb-6 inline-block">
            <span className="px-4 py-2 rounded-full text-sm font-semibold" style={{background: 'rgba(167, 139, 250, 0.2)', color: '#a78bfa', border: '1px solid rgba(167, 139, 250, 0.3)'}}>
              🚀 Your Learning Journey Starts Here
            </span>
          </div>

          <h1 className="text-6xl md:text-8xl font-black mb-6 leading-tight" style={{
            background: 'linear-gradient(135deg, #a78bfa 0%, #ec4899 50%, #8b5cf6 100%)',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            backgroundClip: 'text',
            textShadow: '0 0 80px rgba(167, 139, 250, 0.5)'
          }}>
            Map Your Skills.<br/>Own Your Growth.
          </h1>

          <p className="text-xl md:text-2xl text-gray-300 mb-12 max-w-3xl mx-auto leading-relaxed">
            Transform your professional development into an <span className="text-purple-400 font-semibold">interactive cosmic experience</span>.
            Track, test, and triumph with AI-powered insights.
          </p>

          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
            <button
              onClick={goToLogin}
              className="px-8 py-4 rounded-xl font-bold text-lg text-white transition-all duration-300 transform hover:scale-110 hover:shadow-2xl group"
              style={{background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', boxShadow: '0 10px 40px rgba(102, 126, 234, 0.4)'}}
            >
              <span className="flex items-center gap-2">
                Start Your Journey
                <svg className="w-5 h-5 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                </svg>
              </span>
            </button>

            <button
              className="px-8 py-4 rounded-xl font-semibold text-lg transition-all duration-300 transform hover:scale-105"
              style={{
                background: 'rgba(255, 255, 255, 0.05)',
                color: '#e5e7eb',
                border: '2px solid rgba(167, 139, 250, 0.3)',
                backdropFilter: 'blur(10px)'
              }}
            >
              Watch Demo
            </button>
          </div>

          <div className="mt-12 flex items-center justify-center gap-8 text-sm text-gray-400">
            <div className="flex items-center gap-2">
              <svg className="w-5 h-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              Free to start
            </div>
            <div className="flex items-center gap-2">
              <svg className="w-5 h-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              No credit card required
            </div>
            <div className="flex items-center gap-2">
              <svg className="w-5 h-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              Cancel anytime
            </div>
          </div>
        </div>

        {/* Scroll indicator */}
        <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2 animate-bounce">
          <svg className="w-6 h-6 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
          </svg>
        </div>
      </div>

      {/* Features Section */}
      <div className="py-24 px-4 relative">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-5xl font-black text-white mb-4">Powerful Features</h2>
            <p className="text-xl text-gray-300">Everything you need to accelerate your learning</p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature, idx) => (
              <div
                key={idx}
                className="p-8 rounded-2xl transition-all duration-300 transform hover:scale-105 hover:shadow-2xl group cursor-pointer"
                style={{
                  background: 'rgba(255, 255, 255, 0.05)',
                  border: '1px solid rgba(167, 139, 250, 0.2)',
                  backdropFilter: 'blur(10px)'
                }}
              >
                <div className="text-5xl mb-4 transform group-hover:scale-110 transition-transform">{feature.icon}</div>
                <h3 className="text-2xl font-bold text-white mb-3">{feature.title}</h3>
                <p className="text-gray-300 leading-relaxed">{feature.description}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Stats Section */}
      <div className="py-24 px-4">
        <div className="max-w-7xl mx-auto">
          <div className="grid md:grid-cols-3 gap-8 text-center">
            <div>
              <div className="text-6xl font-black mb-2" style={{color: '#a78bfa'}}>10K+</div>
              <div className="text-xl text-gray-300">Active Learners</div>
            </div>
            <div>
              <div className="text-6xl font-black mb-2" style={{color: '#ec4899'}}>500K+</div>
              <div className="text-xl text-gray-300">Skills Tracked</div>
            </div>
            <div>
              <div className="text-6xl font-black mb-2" style={{color: '#8b5cf6'}}>1M+</div>
              <div className="text-xl text-gray-300">Quizzes Completed</div>
            </div>
          </div>
        </div>
      </div>

      {/* Testimonials Section */}
      <div className="py-24 px-4">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-5xl font-black text-white mb-4">Loved by Learners</h2>
            <p className="text-xl text-gray-300">See what our community has to say</p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {testimonials.map((testimonial, idx) => (
              <div
                key={idx}
                className="p-8 rounded-2xl"
                style={{
                  background: 'rgba(255, 255, 255, 0.05)',
                  border: '1px solid rgba(167, 139, 250, 0.2)',
                  backdropFilter: 'blur(10px)'
                }}
              >
                <div className="text-5xl mb-4">{testimonial.avatar}</div>
                <p className="text-gray-300 italic mb-6">"{testimonial.quote}"</p>
                <div>
                  <div className="text-white font-bold">{testimonial.name}</div>
                  <div className="text-purple-400 text-sm">{testimonial.role}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Final CTA Section */}
      <div className="py-32 px-4 relative overflow-hidden">
        <div className="absolute inset-0" style={{background: 'radial-gradient(circle at 50% 50%, rgba(167, 139, 250, 0.15), transparent 70%)'}}></div>

        <div className="max-w-4xl mx-auto text-center relative z-10">
          <h2 className="text-6xl font-black text-white mb-6">Ready to Transform Your Learning?</h2>
          <p className="text-2xl text-gray-300 mb-12">Join thousands of learners mapping their path to success</p>

          <button
            onClick={goToLogin}
            className="px-12 py-5 rounded-xl font-bold text-xl text-white transition-all duration-300 transform hover:scale-110 hover:shadow-2xl"
            style={{background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', boxShadow: '0 15px 50px rgba(102, 126, 234, 0.5)'}}
          >
            Get Started Free →
          </button>

          <p className="mt-8 text-gray-400">Start your journey today. No credit card required.</p>
        </div>
      </div>

      {/* Footer */}
      <footer className="py-12 px-4 border-t border-purple-900/30">
        <div className="max-w-7xl mx-auto">
          <div className="flex flex-col md:flex-row justify-between items-center gap-4">
            <div className="text-2xl font-bold" style={{color: '#a78bfa'}}>WorkDNA</div>
            <div className="flex gap-8 text-gray-400 text-sm">
              <a href="#" className="hover:text-purple-400 transition">Privacy Policy</a>
              <a href="#" className="hover:text-purple-400 transition">Terms of Service</a>
              <a href="#" className="hover:text-purple-400 transition">Contact</a>
            </div>
            <div className="text-gray-400 text-sm">© 2025 WorkDNA. All rights reserved.</div>
          </div>
        </div>
      </footer>
    </div>
  );
}

// Navigation Component
function Navigation({ navigate, currentPage, userName, onLogout }) {
  const navButtonStyle = (page) => {
    const isActive = currentPage === page;
    return {
      base: `text-sm font-medium transition-all duration-300 ease-in-out px-4 py-2 rounded-lg relative ${
        isActive ? 'font-bold' : ''
      }`,
      color: isActive ? '#a78bfa' : '#e5e7eb',
      textShadow: isActive ? '0 0 15px rgba(167, 139, 250, 0.8)' : 'none',
      background: isActive ? 'rgba(167, 139, 250, 0.1)' : 'transparent',
      borderBottom: isActive ? '2px solid #a78bfa' : 'none'
    };
  };

  return (
    <header className="px-8 py-6 flex justify-between items-center sticky top-0 z-50" style={{background: 'rgba(15, 12, 41, 0.95)', backdropFilter: 'blur(10px)', borderBottom: '2px solid rgba(167, 139, 250, 0.3)'}}>
      <div className="text-2xl font-bold tracking-wider cursor-pointer transition-all duration-300 hover:scale-110" style={{color: '#a78bfa', textShadow: '0 0 20px rgba(167, 139, 250, 0.5)'}} onClick={() => navigate('home')}>
        WorkDNA
      </div>
      <nav className="flex gap-2 items-center">
        {['home', 'about', 'skill-galaxy', 'team-matrix', 'quiz', 'recommendations'].map((page) => {
          const style = navButtonStyle(page);
          const label = page === 'home' ? 'HOME' :
                       page === 'about' ? 'ABOUT' :
                       page === 'skill-galaxy' ? 'SKILL GALAXY' :
                       page === 'team-matrix' ? 'TEAM MATRIX' :
                       page === 'quiz' ? 'TAKE QUIZ' : 'INSIGHTS';

          return (
            <button
              key={page}
              onClick={() => navigate(page)}
              className={`${style.base} hover:bg-purple-900/30 hover:text-purple-300 hover:shadow-lg hover:-translate-y-0.5`}
              style={{
                color: style.color,
                textShadow: style.textShadow,
                background: style.background,
                borderBottom: style.borderBottom
              }}
            >
              {label}
            </button>
          );
        })}
      </nav>
      <div className="flex items-center gap-4">
        {userName && (
          <span className="text-gray-300 text-sm">Welcome, <span className="text-purple-400 font-semibold">{userName}</span></span>
        )}
        <button
          onClick={onLogout}
          className="text-sm px-6 py-2 rounded-lg font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:brightness-110"
          style={{background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', color: 'white', boxShadow: '0 4px 15px rgba(102, 126, 234, 0.4)'}}>
          LOG OUT
        </button>
      </div>
    </header>
  );
}

// Login Page Component
function LoginPage({ onLogin }) {
  const [isSignUp, setIsSignUp] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [particles, setParticles] = useState([]);

  useEffect(() => {
    // Generate floating particles
    const newParticles = Array.from({ length: 50 }, (_, i) => ({
      id: i,
      x: Math.random() * 100,
      y: Math.random() * 100,
      size: Math.random() * 3 + 1,
      duration: Math.random() * 20 + 10,
      delay: Math.random() * 5
    }));
    setParticles(newParticles);
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (isSignUp) {
      if (formData.password !== formData.confirmPassword) {
        alert('Passwords do not match!');
        return;
      }
      if (!formData.name || !formData.email || !formData.password) {
        alert('Please fill all fields!');
        return;
      }
    } else {
      if (!formData.email || !formData.password) {
        alert('Please enter email and password!');
        return;
      }
    }
    // Simple login - in real app, would validate with backend
    const userName = formData.name || formData.email.split('@')[0];
    onLogin(userName);
  };

  const handleSocialLogin = (provider) => {
    // Simulate social login
    onLogin(`${provider}User`);
  };

  return (
    <div className="min-h-screen flex items-center justify-center relative overflow-hidden px-4">
      {/* Animated background particles */}
      <div className="absolute inset-0 overflow-hidden">
        {particles.map((particle) => (
          <div
            key={particle.id}
            className="absolute rounded-full bg-purple-400 opacity-20 animate-pulse"
            style={{
              left: `${particle.x}%`,
              top: `${particle.y}%`,
              width: `${particle.size}px`,
              height: `${particle.size}px`,
              animation: `float ${particle.duration}s infinite ease-in-out ${particle.delay}s`
            }}
          />
        ))}
      </div>

      {/* Main login card */}
      <div className="relative z-10 w-full max-w-md">
        {/* Glass-morphism card */}
        <div className="backdrop-blur-xl bg-white/10 rounded-2xl shadow-2xl p-8 border border-purple-500/30" style={{boxShadow: '0 8px 32px 0 rgba(102, 126, 234, 0.37)'}}>
          {/* Logo */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-black mb-2" style={{color: '#a78bfa', textShadow: '0 0 30px rgba(167, 139, 250, 0.8)'}}>
              WorkDNA
            </h1>
            <p className="text-gray-300 text-sm">
              {isSignUp ? 'Create your cosmic profile' : 'Welcome back to your skill universe'}
            </p>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="space-y-5">
            {isSignUp && (
              <div>
                <label className="block text-gray-200 text-sm font-medium mb-2">Full Name</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  className="w-full px-4 py-3 rounded-lg bg-white/5 border border-purple-500/30 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition"
                  placeholder="Enter your name"
                />
              </div>
            )}

            <div>
              <label className="block text-gray-200 text-sm font-medium mb-2">Email</label>
              <input
                type="email"
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                className="w-full px-4 py-3 rounded-lg bg-white/5 border border-purple-500/30 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition"
                placeholder="your@email.com"
              />
            </div>

            <div>
              <label className="block text-gray-200 text-sm font-medium mb-2">Password</label>
              <input
                type="password"
                value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                className="w-full px-4 py-3 rounded-lg bg-white/5 border border-purple-500/30 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition"
                placeholder="••••••••"
              />
            </div>

            {isSignUp && (
              <div>
                <label className="block text-gray-200 text-sm font-medium mb-2">Confirm Password</label>
                <input
                  type="password"
                  value={formData.confirmPassword}
                  onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                  className="w-full px-4 py-3 rounded-lg bg-white/5 border border-purple-500/30 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition"
                  placeholder="••••••••"
                />
              </div>
            )}

            {!isSignUp && (
              <div className="flex items-center justify-between">
                <label className="flex items-center">
                  <input type="checkbox" className="mr-2 rounded" />
                  <span className="text-gray-300 text-sm">Remember me</span>
                </label>
                <a href="#" className="text-purple-400 text-sm hover:text-purple-300 transition">Forgot password?</a>
              </div>
            )}

            <button
              type="submit"
              className="w-full py-3 rounded-lg font-semibold text-white transition-all duration-300 transform hover:scale-105 hover:shadow-2xl"
              style={{background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', boxShadow: '0 4px 15px rgba(102, 126, 234, 0.4)'}}
            >
              {isSignUp ? 'Create Account' : 'Sign In'}
            </button>
          </form>

          {/* Divider */}
          <div className="flex items-center my-6">
            <div className="flex-1 border-t border-gray-600"></div>
            <span className="px-4 text-gray-400 text-sm">or continue with</span>
            <div className="flex-1 border-t border-gray-600"></div>
          </div>

          {/* Social login buttons */}
          <div className="grid grid-cols-2 gap-3">
            <button
              onClick={() => handleSocialLogin('GitHub')}
              className="py-2 px-4 rounded-lg bg-white/5 border border-purple-500/30 text-gray-200 hover:bg-white/10 transition-all duration-300 flex items-center justify-center gap-2"
            >
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
              </svg>
              GitHub
            </button>
            <button
              onClick={() => handleSocialLogin('Google')}
              className="py-2 px-4 rounded-lg bg-white/5 border border-purple-500/30 text-gray-200 hover:bg-white/10 transition-all duration-300 flex items-center justify-center gap-2"
            >
              <svg className="w-5 h-5" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Google
            </button>
          </div>

          {/* Toggle between login and signup */}
          <div className="mt-6 text-center">
            <p className="text-gray-300 text-sm">
              {isSignUp ? 'Already have an account?' : "Don't have an account?"}{' '}
              <button
                onClick={() => setIsSignUp(!isSignUp)}
                className="text-purple-400 font-semibold hover:text-purple-300 transition"
              >
                {isSignUp ? 'Sign In' : 'Sign Up'}
              </button>
            </p>
          </div>
        </div>

        {/* Floating animation style */}
        <style>{`
          @keyframes float {
            0%, 100% {
              transform: translateY(0) translateX(0);
            }
            25% {
              transform: translateY(-20px) translateX(10px);
            }
            50% {
              transform: translateY(-10px) translateX(-10px);
            }
            75% {
              transform: translateY(-15px) translateX(5px);
            }
          }
        `}</style>
      </div>
    </div>
  );
}


// Constellation Canvas Component
function ConstellationCanvas({ skills }) {
  const canvasRef = useRef(null);
  const starsRef = useRef([]);
  const animationFrameRef = useRef(null);
  const isDraggingRef = useRef(false);
  const selectedStarRef = useRef(null);

  const getStarColor = (progress) => {
    if (progress >= 80) return '#10b981';
    if (progress >= 60) return '#3b82f6';
    if (progress >= 40) return '#f59e0b';
    if (progress >= 20) return '#ef4444';
    return '#6b7280';
  };

  const createStar = (skill, progress, x = null, y = null, canvas) => {
    if (x === null || y === null) {
      const angle = Math.random() * Math.PI * 2;
      const radius = 150 + Math.random() * 150;
      x = canvas.width / 2 + Math.cos(angle) * radius;
      y = canvas.height / 2 + Math.sin(angle) * radius;
    }
    x = Math.max(50, Math.min(canvas.width - 50, x));
    y = Math.max(50, Math.min(canvas.height - 50, y));
    return {
      skill, progress, x, y,
      size: 8 + (progress / 100) * 7,
      color: getStarColor(progress),
      twinkle: Math.random() * Math.PI * 2
    };
  };

  const drawStar = (ctx, star) => {
    const gradient = ctx.createRadialGradient(star.x, star.y, 0, star.x, star.y, star.size * 3);
    gradient.addColorStop(0, `${star.color}ff`);
    gradient.addColorStop(0.5, `${star.color}88`);
    gradient.addColorStop(1, `${star.color}00`);
    ctx.fillStyle = gradient;
    ctx.beginPath();
    ctx.arc(star.x, star.y, star.size * 3, 0, Math.PI * 2);
    ctx.fill();
    ctx.fillStyle = star.color;
    ctx.beginPath();
    ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
    ctx.fill();
    ctx.fillStyle = 'white';
    ctx.font = 'bold 14px Inter';
    ctx.textAlign = 'center';
    ctx.fillText(star.skill, star.x, star.y + star.size * 4 + 10);
    ctx.font = '12px Inter';
    ctx.fillStyle = '#a78bfa';
    ctx.fillText(`${Math.round(star.progress)}%`, star.x, star.y + star.size * 4 + 25);
  };

  const drawConnection = (ctx, star1, star2, strength = 1) => {
    const opacity = Math.min(0.3 * strength, 0.6);
    ctx.strokeStyle = `rgba(167, 139, 250, ${opacity})`;
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(star1.x, star1.y);
    ctx.lineTo(star2.x, star2.y);
    ctx.stroke();
  };

  const draw = (canvas, ctx, stars) => {
    ctx.fillStyle = 'rgba(15, 12, 41, 0.1)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    for (let i = 0; i < stars.length; i++) {
      for (let j = i + 1; j < stars.length; j++) {
        const star1 = stars[i];
        const star2 = stars[j];
        const distance = Math.sqrt(Math.pow(star2.x - star1.x, 2) + Math.pow(star2.y - star1.y, 2));
        if (distance < 200) {
          drawConnection(ctx, star1, star2, 1 - distance / 200);
        }
      }
    }
    stars.forEach(star => drawStar(ctx, star));
  };

  const animate = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    starsRef.current.forEach(star => {
      star.twinkle += 0.05;
      star.x += Math.sin(star.twinkle) * 0.2;
      star.y += Math.cos(star.twinkle) * 0.2;
      star.x = Math.max(50, Math.min(canvas.width - 50, star.x));
      star.y = Math.max(50, Math.min(canvas.height - 50, star.y));
    });
    draw(canvas, ctx, starsRef.current);
    animationFrameRef.current = requestAnimationFrame(animate);
  };

  const getStarAt = (x, y) => {
    for (const star of starsRef.current) {
      const distance = Math.sqrt(Math.pow(x - star.x, 2) + Math.pow(y - star.y, 2));
      if (distance <= star.size * 3) return star;
    }
    return null;
  };

  const handleMouseDown = (e) => {
    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    const star = getStarAt(e.clientX - rect.left, e.clientY - rect.top);
    if (star) {
      selectedStarRef.current = star;
      isDraggingRef.current = true;
      canvas.style.cursor = 'grabbing';
    }
  };

  const handleMouseMove = (e) => {
    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    if (isDraggingRef.current && selectedStarRef.current) {
      selectedStarRef.current.x = x;
      selectedStarRef.current.y = y;
    } else {
      canvas.style.cursor = getStarAt(x, y) ? 'pointer' : 'default';
    }
  };

  const handleMouseUp = () => {
    isDraggingRef.current = false;
    selectedStarRef.current = null;
    if (canvasRef.current) canvasRef.current.style.cursor = 'default';
  };

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const existingSkills = new Set(starsRef.current.map(s => s.skill));
    const newSkills = new Set(Object.keys(skills));
    starsRef.current = starsRef.current.filter(star => newSkills.has(star.skill));
    starsRef.current.forEach(star => {
      star.progress = skills[star.skill];
      star.size = 8 + (star.progress / 100) * 7;
      star.color = getStarColor(star.progress);
    });
    for (const skill in skills) {
      if (!existingSkills.has(skill)) {
        starsRef.current.push(createStar(skill, skills[skill], null, null, canvas));
      }
    }
    if (!animationFrameRef.current) animate();
    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
        animationFrameRef.current = null;
      }
    };
  }, [skills]);

  return (
    <canvas
      ref={canvasRef}
      width={1200}
      height={700}
      onMouseDown={handleMouseDown}
      onMouseMove={handleMouseMove}
      onMouseUp={handleMouseUp}
      className="w-full rounded-xl"
      style={{
        background: 'rgba(0, 0, 0, 0.4)',
        border: '2px solid rgba(167, 139, 250, 0.3)',
        boxShadow: '0 0 40px rgba(102, 126, 234, 0.3), inset 0 0 60px rgba(15, 12, 41, 0.8)',
        maxHeight: '700px'
      }}
    />
  );
}

// Home Page
function HomePage({ navigate, userName, onLogout }) {
  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="home" userName={userName} onLogout={onLogout} />

      <main className="flex-1 flex flex-col items-center justify-center px-8 py-16 relative">
        <svg className="absolute left-0 top-1/2 -translate-y-1/2 w-32 h-64" viewBox="0 0 100 200">
          <path d="M 10 0 Q 50 50, 10 100 T 10 200" stroke="#a78bfa" strokeWidth="3" fill="none" />
        </svg>
        <svg className="absolute right-0 top-1/2 -translate-y-1/2 w-32 h-64" viewBox="0 0 100 200">
          <path d="M 90 0 Q 50 50, 90 100 T 90 200" stroke="#a78bfa" strokeWidth="3" fill="none" />
        </svg>

        <div className="mb-4">
          <svg width="40" height="40" viewBox="0 0 40 40" fill="none">
            <rect x="8" y="8" width="8" height="24" fill="#a78bfa" />
            <rect x="24" y="8" width="8" height="24" fill="#a78bfa" />
          </svg>
        </div>

        <h1 className="text-6xl md:text-7xl font-black text-center mb-6 tracking-tight text-white">
          CREATE<br />
          THE <span className="relative inline-block">
            <span className="relative z-10 text-purple-300">BEST</span>
            <span className="absolute inset-0 bg-purple-500 opacity-20 rounded-lg blur-lg"></span>
          </span> TEAM
        </h1>

        <p className="text-gray-300 text-center max-w-md mb-8 leading-relaxed">
          Explore innovative tools for team building, skill tracking, and adaptive quizzes.
        </p>

        <div className="flex gap-4 mb-16">
          <button
            onClick={() => navigate('skill-galaxy')}
            className="bg-gradient-to-r from-purple-600 to-purple-700 text-white px-8 py-3 rounded-md font-medium hover:bg-gray-800 transition"
          >
            EXPLORE TOOLS
          </button>
          <button
            onClick={() => navigate('about')}
            className="border-2 border-purple-400 text-purple-300 hover:bg-purple-400/10 px-8 py-3 rounded-md font-medium hover:bg-gray-100 transition"
          >
            LEARN MORE
          </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-5xl w-full">
          <div
            onClick={() => navigate('skill-galaxy')}
            className="p-6 border-2 border-purple-900/30 rounded-lg hover:border-purple-500 transition cursor-pointer"
          >
            <div className="text-3xl mb-3">🌌</div>
            <h3 className="text-xl font-bold mb-2 text-white">Skill Galaxy</h3>
            <p className="text-gray-300 text-sm">Visualize your skills as a cosmic universe that grows with you.</p>
          </div>

          <div
            onClick={() => navigate('team-matrix')}
            className="p-6 border-2 border-purple-900/30 rounded-lg hover:border-purple-500 transition cursor-pointer"
          >
            <div className="text-3xl mb-3">📊</div>
            <h3 className="text-xl font-bold mb-2 text-white">Team Matrix</h3>
            <p className="text-gray-300 text-sm">Map your team's collective skills and identify gaps.</p>
          </div>

          <div
            onClick={() => navigate('quiz')}
            className="p-6 border-2 border-purple-900/30 rounded-lg hover:border-purple-500 transition cursor-pointer"
          >
            <div className="text-3xl mb-3">📝</div>
            <h3 className="text-xl font-bold mb-2 text-white">Skill Quiz</h3>
            <p className="text-gray-300 text-sm">Test your knowledge with AI-generated quizzes and coding challenges.</p>
          </div>
        </div>
      </main>
    </div>
  );
}

// About Page
function AboutPage({ navigate, userName, onLogout }) {
  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="about" userName={userName} onLogout={onLogout} />

      <main className="flex-1 px-8 py-16 max-w-4xl mx-auto">
        <h1 className="text-5xl font-black mb-6 text-white">About WorkDNA</h1>
        <p className="text-gray-200 text-lg mb-6 leading-relaxed">
          WorkDNA is an innovative platform designed to revolutionize how individuals and teams track growth,
          develop skills, and visualize their professional constellation.
        </p>

        <div className="space-y-8 mt-12">
          <div>
            <h2 className="text-2xl font-bold mb-3 text-white">🧬 WorkDNA Technology</h2>
            <p className="text-gray-300 leading-relaxed">
              Our WorkDNA system creates a dynamic skill blueprint that evolves with your experience.
              Track technical and soft skills, visualize growth, and plan your career journey.
            </p>
          </div>

          <div>
            <h2 className="text-2xl font-bold mb-3 text-white">🤖 AI-Powered Assessment</h2>
            <p className="text-gray-300 leading-relaxed">
              We leverage Google Gemini AI to generate personalized quizzes and coding challenges that adapt
              to your skill level and provide meaningful learning experiences.
            </p>
          </div>

          <div>
            <h2 className="text-2xl font-bold mb-3 text-white">📈 Growth-Focused</h2>
            <p className="text-gray-300 leading-relaxed">
              Every tool we build is designed to help you and your team grow. From skill visualization
              to personalized recommendations, we empower continuous improvement.
            </p>
          </div>
        </div>

        <button
          onClick={() => navigate('home')}
          className="mt-12 bg-purple-600 text-white px-8 py-3 rounded-md font-medium hover:bg-purple-700 transition"
        >
          BACK TO HOME
        </button>
      </main>
    </div>
  );
}

// Skill Galaxy Page
function SkillGalaxyPage({ navigate, userName, onLogout, skills, setSkills, loadUserData }) {
  const [newSkillName, setNewSkillName] = useState('');
  const [showAddModal, setShowAddModal] = useState(false);
  const [githubInput, setGithubInput] = useState('');
  const [githubStatus, setGithubStatus] = useState('');

  const addSkill = async () => {
    if (!newSkillName.trim()) return;

    try {
      const response = await fetch(`${API_BASE_URL}/api/add-skill`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: currentUserId,
          skill: newSkillName
        })
      });

      const data = await response.json();
      if (data.success) {
        await loadUserData();
        setNewSkillName('');
        setShowAddModal(false);
      }
    } catch (error) {
      console.error('Error adding skill:', error);
    }
  };

  const analyzeGitHub = async () => {
    if (!githubInput.trim()) {
      setGithubStatus('Please enter a GitHub username or repository URL');
      return;
    }

    setGithubStatus('Analyzing GitHub profile...');

    try {
      const isUrl = githubInput.includes('github.com');
      const response = await fetch(`${API_BASE_URL}/api/analyze-github`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          github_url: isUrl ? githubInput : null,
          username: !isUrl ? githubInput : null
        })
      });

      const data = await response.json();
      if (data.success) {
        const skillCount = Object.keys(data.skills).length;
        setGithubStatus(`Successfully imported ${skillCount} skills from GitHub!`);
        await loadUserData();
        setGithubInput('');
      } else {
        setGithubStatus(`Error: ${data.error}`);
      }
    } catch (error) {
      console.error('Error analyzing GitHub:', error);
      setGithubStatus('Error analyzing GitHub. Please check the input and try again.');
    }
  };

  const skillsArray = Object.entries(skills).map(([name, level], idx) => ({
    name,
    level,
    category: 'Technical',
    x: 20 + (idx % 3) * 30,
    y: 20 + Math.floor(idx / 3) * 30
  }));

  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="skill-galaxy" userName={userName} onLogout={onLogout} />

      <main className="flex-1 px-8 py-16">
        <div className="max-w-6xl mx-auto">
          <h1 className="text-4xl font-black mb-4 text-white">🌌 Skill Galaxy</h1>
          <p className="text-gray-300 mb-8">Your skills as a cosmic visualization</p>

          {/* GitHub Import Section */}
          <div className="bg-purple-900/10 rounded-lg p-6 mb-8 border border-purple-900/30">
            <h2 className="text-xl font-bold mb-4">Import Skills from GitHub</h2>
            <div className="flex gap-4">
              <input
                type="text"
                value={githubInput}
                onChange={(e) => setGithubInput(e.target.value)}
                placeholder="Enter GitHub username or repository URL"
                className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:border-purple-500"
              />
              <button
                onClick={analyzeGitHub}
                className="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition"
              >
                Analyze
              </button>
            </div>
            {githubStatus && (
              <div className="mt-4 text-sm text-gray-300">{githubStatus}</div>
            )}
          </div>

          {/* Interactive Constellation Canvas */}
          <div className="mb-8">
            <ConstellationCanvas skills={skills} />
          </div>

          {/* Skills List */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
            {skillsArray.map((skill, idx) => (
              <div key={idx} className="p-4 border border-purple-900/30 rounded-lg bg-gray-900/50">
                <h3 className="font-bold mb-2">{skill.name}</h3>
                <div className="text-sm text-gray-300 mb-2">{skill.category}</div>
                <div className="bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-purple-500 h-2 rounded-full"
                    style={{ width: `${skill.level}%` }}
                  ></div>
                </div>
                <div className="text-right text-sm text-gray-300 mt-1">{skill.level}%</div>
              </div>
            ))}
          </div>

          <button
            onClick={() => setShowAddModal(true)}
            className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition"
          >
            + Add New Skill
          </button>
        </div>
      </main>

      {/* Add Skill Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-900/50 p-8 rounded-lg max-w-md w-full mx-4">
            <h3 className="text-2xl font-bold mb-4">Add New Skill</h3>
            <input
              type="text"
              value={newSkillName}
              onChange={(e) => setNewSkillName(e.target.value)}
              placeholder="Enter skill name"
              className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:border-purple-500 mb-4"
              onKeyPress={(e) => e.key === 'Enter' && addSkill()}
            />
            <div className="flex gap-4">
              <button
                onClick={addSkill}
                className="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition flex-1"
              >
                Add
              </button>
              <button
                onClick={() => {
                  setShowAddModal(false);
                  setNewSkillName('');
                }}
                className="bg-gray-200 text-white px-6 py-2 rounded-lg hover:bg-gray-300 transition flex-1"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// Team Matrix Page
function TeamMatrixPage({ navigate, userName, onLogout }) {
  const [teamMembers, setTeamMembers] = useState([
    { name: 'Alice', skills: { React: 90, Node: 70, Design: 60 } },
    { name: 'Bob', skills: { React: 60, Node: 85, Design: 40 } },
    { name: 'Charlie', skills: { React: 75, Node: 65, Design: 80 } },
  ]);
  const [showAddForm, setShowAddForm] = useState(false);
  const [newMember, setNewMember] = useState({
    name: '',
    skills: { React: 50, Node: 50, Design: 50 }
  });

  const addTeamMember = () => {
    if (newMember.name.trim()) {
      setTeamMembers([...teamMembers, { ...newMember }]);
      setNewMember({ name: '', skills: { React: 50, Node: 50, Design: 50 } });
      setShowAddForm(false);
    }
  };

  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="team-matrix" userName={userName} onLogout={onLogout} />

      <main className="flex-1 px-8 py-16">
        <div className="max-w-6xl mx-auto">
          <h1 className="text-4xl font-black mb-4 text-white">📊 Team Skill Matrix</h1>
          <p className="text-gray-300 mb-8">Visualize your team's collective capabilities</p>

          <div className="bg-gray-900/50 border border-purple-900/30 rounded-lg overflow-hidden">
            <table className="w-full">
              <thead className="bg-purple-900/30">
                <tr>
                  <th className="px-6 py-3 text-left text-white font-semibold">Team Member</th>
                  <th className="px-6 py-3 text-left text-white font-semibold">React</th>
                  <th className="px-6 py-3 text-left text-white font-semibold">Node.js</th>
                  <th className="px-6 py-3 text-left text-white font-semibold">Design</th>
                </tr>
              </thead>
              <tbody>
                {teamMembers.map((member, idx) => (
                  <tr key={idx} className="border-t border-purple-900/30">
                    <td className="px-6 py-4 font-medium text-white">{member.name}</td>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-2">
                        <div className="bg-gray-700 rounded-full h-2 w-24">
                          <div
                            className="bg-purple-500 h-2 rounded-full"
                            style={{ width: `${member.skills.React}%` }}
                          ></div>
                        </div>
                        <span className="text-sm text-gray-300">{member.skills.React}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-2">
                        <div className="bg-gray-700 rounded-full h-2 w-24">
                          <div
                            className="bg-purple-500 h-2 rounded-full"
                            style={{ width: `${member.skills.Node}%` }}
                          ></div>
                        </div>
                        <span className="text-sm text-gray-300">{member.skills.Node}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-2">
                        <div className="bg-gray-700 rounded-full h-2 w-24">
                          <div
                            className="bg-purple-500 h-2 rounded-full"
                            style={{ width: `${member.skills.Design}%` }}
                          ></div>
                        </div>
                        <span className="text-sm text-gray-300">{member.skills.Design}</span>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {showAddForm && (
            <div className="mt-6 bg-gray-900/50 border border-purple-900/30 rounded-lg p-6">
              <h3 className="text-xl font-bold text-white mb-4">Add New Team Member</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-gray-300 mb-2">Name</label>
                  <input
                    type="text"
                    value={newMember.name}
                    onChange={(e) => setNewMember({ ...newMember, name: e.target.value })}
                    className="w-full px-4 py-2 rounded-lg bg-gray-800 border border-purple-900/30 text-white focus:outline-none focus:border-purple-500"
                    placeholder="Enter member name"
                  />
                </div>
                <div>
                  <label className="block text-gray-300 mb-2">React Skills: {newMember.skills.React}%</label>
                  <input
                    type="range"
                    min="0"
                    max="100"
                    value={newMember.skills.React}
                    onChange={(e) => setNewMember({ ...newMember, skills: { ...newMember.skills, React: parseInt(e.target.value) } })}
                    className="w-full"
                  />
                </div>
                <div>
                  <label className="block text-gray-300 mb-2">Node.js Skills: {newMember.skills.Node}%</label>
                  <input
                    type="range"
                    min="0"
                    max="100"
                    value={newMember.skills.Node}
                    onChange={(e) => setNewMember({ ...newMember, skills: { ...newMember.skills, Node: parseInt(e.target.value) } })}
                    className="w-full"
                  />
                </div>
                <div>
                  <label className="block text-gray-300 mb-2">Design Skills: {newMember.skills.Design}%</label>
                  <input
                    type="range"
                    min="0"
                    max="100"
                    value={newMember.skills.Design}
                    onChange={(e) => setNewMember({ ...newMember, skills: { ...newMember.skills, Design: parseInt(e.target.value) } })}
                    className="w-full"
                  />
                </div>
                <div className="flex gap-3">
                  <button
                    onClick={addTeamMember}
                    className="bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition"
                  >
                    Add Member
                  </button>
                  <button
                    onClick={() => setShowAddForm(false)}
                    className="bg-gray-600 text-white px-6 py-2 rounded hover:bg-gray-700 transition"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          )}

          <button
            onClick={() => setShowAddForm(!showAddForm)}
            className="mt-8 bg-purple-600 text-white px-6 py-2 rounded hover:bg-purple-700 transition"
          >
            {showAddForm ? 'Hide Form' : '+ Add Team Member'}
          </button>
        </div>
      </main>
    </div>
  );
}

// Quiz Page
function QuizPage({ navigate, userName, onLogout, skills, loadUserData }) {
  const [selectedSkill, setSelectedSkill] = useState('');
  const [difficulty, setDifficulty] = useState('medium');
  const [currentQuiz, setCurrentQuiz] = useState(null);
  const [userAnswers, setUserAnswers] = useState([]);
  const [showResults, setShowResults] = useState(false);
  const [score, setScore] = useState(0);
  const [loading, setLoading] = useState(false);

  const generateQuiz = async () => {
    if (!selectedSkill) {
      alert('Please select a skill');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`${API_BASE_URL}/api/generate-quiz`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          skill: selectedSkill,
          difficulty: difficulty,
          question_count: 5
        })
      });

      const data = await response.json();
      if (data.success) {
        setCurrentQuiz(data.quiz);
        setUserAnswers(new Array(data.quiz.questions.length).fill(''));
      } else {
        alert('Error generating quiz: ' + data.error);
      }
    } catch (error) {
      console.error('Error generating quiz:', error);
      alert('Error generating quiz. Please try again.');
    }
    setLoading(false);
  };

  const submitQuiz = async () => {
    if (!currentQuiz) return;

    const allAnswered = userAnswers.every(a => a !== '' && a !== null);
    if (!allAnswered) {
      if (!window.confirm("You haven't answered all questions. Submit anyway?")) {
        return;
      }
    }

    try {
      let correctCount = 0;
      const correctAnswers = [];
      const weakTopics = [];

      for (let i = 0; i < currentQuiz.questions.length; i++) {
        const question = currentQuiz.questions[i];
        if (question.type === 'mcq') {
          const isCorrect = userAnswers[i] === question.correct_answer;
          if (isCorrect) {
            correctCount++;
          } else {
            // Track incorrect MCQ topics
            const topicName = question.question.substring(0, 60) + '...';
            weakTopics.push(topicName);
          }
          correctAnswers.push(question.correct_answer);
        } else {
          // For coding questions, simple check if they provided substantial answer
          const hasSubstantialAnswer = userAnswers[i] && userAnswers[i].trim().length > 50;
          if (hasSubstantialAnswer) {
            correctCount += 0.5;
          } else {
            // Track weak coding topics
            weakTopics.push(question.title || 'Coding Challenge');
          }
          correctAnswers.push(null);
        }
      }

      const calculatedScore = (correctCount / currentQuiz.questions.length) * 100;
      setScore(Math.round(calculatedScore));

      const response = await fetch(`${API_BASE_URL}/api/submit-quiz`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: currentUserId,
          skill: currentQuiz.skill,
          answers: userAnswers,
          correct_answers: correctAnswers,
          weak_topics: weakTopics
        })
      });

      await response.json();
      setShowResults(true);
      await loadUserData();
    } catch (error) {
      console.error('Error submitting quiz:', error);
    }
  };

  const resetQuiz = () => {
    setCurrentQuiz(null);
    setUserAnswers([]);
    setShowResults(false);
    setScore(0);
    setSelectedSkill('');
  };

  const recordAnswer = (index, answer) => {
    const newAnswers = [...userAnswers];
    newAnswers[index] = answer;
    setUserAnswers(newAnswers);
  };

  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="quiz" userName={userName} onLogout={onLogout} />

      <main className="flex-1 px-8 py-16">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl font-black mb-4 text-white">📝 Take a Quiz</h1>
          <p className="text-gray-300 mb-8">Test your knowledge with AI-generated questions</p>

          {!currentQuiz && !showResults && (
            <div className="bg-gray-900/50 border border-purple-900/30 rounded-lg p-8">
              <div className="mb-4">
                <label className="block text-gray-200 mb-2 font-medium">Select Skill</label>
                <select
                  value={selectedSkill}
                  onChange={(e) => setSelectedSkill(e.target.value)}
                  className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:border-purple-500"
                >
                  <option value="">Choose a skill...</option>
                  {Object.keys(skills).map(skill => (
                    <option key={skill} value={skill}>{skill}</option>
                  ))}
                </select>
              </div>

              <div className="mb-6">
                <label className="block text-gray-200 mb-2 font-medium">Difficulty</label>
                <select
                  value={difficulty}
                  onChange={(e) => setDifficulty(e.target.value)}
                  className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:border-purple-500"
                >
                  <option value="easy">Easy</option>
                  <option value="medium">Medium</option>
                  <option value="hard">Hard</option>
                </select>
              </div>

              <button
                onClick={generateQuiz}
                disabled={loading}
                className="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition w-full font-medium disabled:bg-gray-400"
              >
                {loading ? 'Generating Quiz...' : 'Generate Quiz'}
              </button>
            </div>
          )}

          {currentQuiz && !showResults && (
            <div className="bg-gray-900/50 border border-purple-900/30 rounded-lg p-8">
              <h2 className="text-2xl font-bold mb-6">{currentQuiz.skill} Quiz - {currentQuiz.difficulty}</h2>

              {currentQuiz.questions.map((question, index) => (
                <div key={index} className="mb-8 p-6 bg-purple-900/10 rounded-lg border border-purple-900/30">
                  {question.type === 'mcq' ? (
                    <>
                      <div className="mb-4">
                        <span className="text-purple-400 font-semibold">Question {index + 1}</span>
                        <h4 className="text-xl text-white mt-2">{question.question}</h4>
                      </div>
                      <div className="space-y-3">
                        {Object.entries(question.options).map(([key, value]) => (
                          <label key={key} className="flex items-start p-3 rounded-lg bg-gray-900/50 border border-purple-900/30 hover:border-purple-500 cursor-pointer transition">
                            <input
                              type="radio"
                              name={`question-${index}`}
                              value={key}
                              checked={userAnswers[index] === key}
                              onChange={() => recordAnswer(index, key)}
                              className="mt-1 mr-3"
                            />
                            <span className="text-gray-200">
                              <strong>{key}:</strong> {value}
                            </span>
                          </label>
                        ))}
                      </div>
                    </>
                  ) : (
                    <>
                      <div className="mb-4">
                        <span className="text-purple-400 font-semibold">Coding Problem {index + 1}</span>
                        <h4 className="text-xl text-white mt-2">{question.title}</h4>
                      </div>
                      <div className="mb-4 text-gray-200 whitespace-pre-wrap">
                        {question.description}
                      </div>
                      {question.examples && (
                        <div className="mb-4">
                          <h5 className="text-white font-semibold mb-2">Examples:</h5>
                          {question.examples.map((ex, idx) => (
                            <div key={idx} className="bg-purple-900 text-gray-100 p-3 rounded mb-2 text-sm font-mono">
                              <div className="text-green-400">Input: {ex.input}</div>
                              <div className="text-blue-400">Output: {ex.output}</div>
                              {ex.explanation && <div className="text-gray-400 mt-1">{ex.explanation}</div>}
                            </div>
                          ))}
                        </div>
                      )}
                      <div className="mb-2">
                        <h5 className="text-white font-semibold mb-2">Your Solution:</h5>
                      </div>
                      <textarea
                        value={userAnswers[index]}
                        onChange={(e) => recordAnswer(index, e.target.value)}
                        className="w-full h-64 p-4 bg-purple-900 text-gray-100 rounded-lg font-mono text-sm resize-y focus:outline-none focus:ring-2 focus:ring-purple-500"
                        placeholder={question.function_signature || "Write your solution here..."}
                      />
                    </>
                  )}
                </div>
              ))}

              <button
                onClick={submitQuiz}
                className="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition w-full font-medium"
              >
                Submit Quiz
              </button>
            </div>
          )}

          {showResults && (
            <div className="bg-gray-900/50 border border-purple-900/30 rounded-lg p-8 text-center">
              <h3 className="text-4xl font-bold text-white mb-4">Your Score</h3>
              <div className="text-6xl font-bold text-purple-400 mb-6">{score}%</div>
              <p className="text-gray-200 mb-8 text-lg">
                {score >= 90 ? 'Outstanding! You have excellent mastery of this skill!' :
                 score >= 70 ? 'Great job! You have a solid understanding of this skill.' :
                 score >= 50 ? 'Good effort! Keep practicing to improve your skills.' :
                 'Keep learning! Review the materials and try again.'}
              </p>
              <button
                onClick={resetQuiz}
                className="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition font-medium"
              >
                Take Another Quiz
              </button>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}

// Recommendations Page
function RecommendationsPage({ navigate, userName, onLogout, skills }) {
  const [weakTopics, setWeakTopics] = useState([]);
  const [loading, setLoading] = useState(false);

  const loadWeakTopics = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_BASE_URL}/api/get-recommendations`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: currentUserId })
      });

      const data = await response.json();
      if (data.success) {
        setWeakTopics(data.weak_topics || []);
      }
    } catch (error) {
      console.error('Error loading weak topics:', error);
    }
    setLoading(false);
  };

  return (
    <div className="flex flex-col min-h-screen">
      <Navigation navigate={navigate} currentPage="recommendations" userName={userName} onLogout={onLogout} />

      <main className="flex-1 px-8 py-16">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl font-black mb-4 text-white">📊 Topics to Improve</h1>
          <p className="text-gray-300 mb-8">Areas where you need more practice based on your quiz results</p>

          <button
            onClick={loadWeakTopics}
            disabled={loading}
            className="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition font-medium mb-8 disabled:bg-gray-400"
          >
            {loading ? 'Loading...' : 'Show Weak Topics'}
          </button>

          {weakTopics.length === 0 && !loading && (
            <div className="bg-purple-900/20 border border-purple-500/30 rounded-lg p-8 text-center">
              <p className="text-gray-300 text-lg">Take some quizzes to identify areas for improvement!</p>
              <button
                onClick={() => navigate('quiz')}
                className="mt-4 bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition"
              >
                Take a Quiz
              </button>
            </div>
          )}

          <div className="space-y-4">
            {weakTopics.map((topic, idx) => (
              <div key={idx} className="bg-gray-900/50 border border-red-500/30 rounded-lg p-6 hover:border-red-500/50 transition">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h3 className="text-xl font-bold text-red-400 mb-2">
                      {topic.topic}
                    </h3>
                    <p className="text-gray-400 text-sm">
                      Related skill: <span className="text-purple-400">{topic.skill}</span>
                    </p>
                  </div>
                  <div className="text-right ml-4">
                    <div className="text-3xl font-bold text-red-400">{Math.round(topic.score)}%</div>
                    <p className="text-gray-500 text-xs mt-1">Last score</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </main>
    </div>
  );
}
